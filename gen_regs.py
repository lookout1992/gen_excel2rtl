#!/usr/bin/python3
# -*- coding: utf-8 -*-

import re
import os,sys
import getopt, logging, pdb, xlrd, copy, time ,math

# 提取excel, sheetFlag=0代表使用by_index方式取sheet
def get_excel(inputNameFile,sheetAName='sheet0',sheetFlag=0):
    row_index=0
    row_values=[]
    # 取excel，获得句柄workbook
    workbook=xlrd.open_workbook(inputNameFile)
    # 取sheet，获得句柄sheet**
    if sheetFlag == 0:
        sheetReg=workbook.sheet_by_index(0)
    else:
        sheetReg=workbook.sheet_by_name(sheetAName)
    # 取行数据，返回列表
    while (1):
        try:
            row_values.append(sheetReg.row_values(row_index))
            row_index+=1
        except:
            return row_values

    print("get_excel() is error !!!")
    sys.exit()

def get_rtl_info(row_values,startRowsList):
    rows_max=len(row_values)
    row_index=0
    rtl_info_dict={}
    while (1):
        if startRowsList.issubset(row_values[row_index]) :
            startRowsIndex=row_index
            for keyname in row_values[startRowsIndex]:
                rtl_info_dict[keyname]={}
            row_index+=1
            break
        else :
            row_index+=1
            continue
    while (1):
        for i in range(0,len(row_values[startRowsIndex])):
            name_num=row_values[startRowsIndex].index('name')
            rtl_info_dict[row_values[startRowsIndex][i]][row_values[row_index][name_num]]=row_values[row_index][i]
        row_index+=1
        if row_index==rows_max:
            break
    return rtl_info_dict

def proc_rtl_info(rtl_info_dict):
    # 遍历所有name、addr、data bits对应的字典所以key
    # 按照不同的类型，处理不同的name
    # addr位是空的，使用上一个地址
    last_addr='0x0'
    msb=0
    lsb=0
    for regname in rtl_info_dict['name'].keys():
        # 处理name
        if rtl_info_dict['type'][regname] == 'rw':
            rtl_info_dict['name'][regname] = 'O_'+rtl_info_dict['name'][regname]
        elif rtl_info_dict['type'][regname] == 'ro':
            rtl_info_dict['name'][regname] = 'I_'+rtl_info_dict['name'][regname]
        elif rtl_info_dict['type'][regname] == 'wp':
            rtl_info_dict['name'][regname] = 'O_'+rtl_info_dict['name'][regname]
        # 处理addr
        if rtl_info_dict['addr'][regname] == '':
            rtl_info_dict['addr'][regname] = last_addr
        else :
            last_addr = rtl_info_dict['addr'][regname]
        # 处理bits
        msb=0
        lsb=0
        bits_flag=0
        if isinstance(rtl_info_dict['data bits'][regname],float) :
            rtl_info_dict['data bits'][regname] = int(rtl_info_dict['data bits'][regname])
        if len(str(rtl_info_dict['data bits'][regname]).split(':',1))>1:
            msb=str(rtl_info_dict['data bits'][regname]).split(':',1)[0]
            lsb=str(rtl_info_dict['data bits'][regname]).split(':',1)[1]
            bits_flag= 1 if msb[-1].isdigit() else 2
        # data bits 分成''、number、msb:lsb、lsb:msb、msb-:len、lsb+:len 6种类型
        if rtl_info_dict['data bits'][regname] == '':
            rtl_info_dict['data bits'][regname] = '0'
        elif bits_flag == 1 :
            if int(msb)==int(lsb) :
                rtl_info_dict['data bits'][regname] = msb
            elif int(msb)>int(lsb) :
                rtl_info_dict['data bits'][regname] = '['+msb+':'+lsb+']'
            elif int(msb)<int(lsb) :
                rtl_info_dict['data bits'][regname] = '['+lsb+':'+msb+']'
        elif bits_flag == 2 :
            if msb[-1]=='-' : 
                rtl_info_dict['data bits'][regname] = '['+msb[:-1]+':'+str(int(msb[:-1])-int(len)+1)+']'
            elif msb[-1]=='+' : 
                rtl_info_dict['data bits'][regname] = '['+str(int(msb[:-1])-int(len)-1)+':'+msb[:-1]+']'
        # 处理reset value
        if isinstance(rtl_info_dict['reset value'][regname],float):
            rtl_info_dict['reset value'][regname] = int(rtl_info_dict['reset value'][regname])
        if rtl_info_dict['reset value'][regname] == '':
            rtl_info_dict['reset value'][regname] = 0
        else :
            rtl_info_dict['reset value'][regname] = int(str(rtl_info_dict['reset value'][regname]),0)
    pass

def gen_v_header(outputNameFile_v,module,addrw):
    outputNameFile_v.write('//=======================================================\n')
    outputNameFile_v.write('// Generated by ./gen_regs.py ***.excel '+module+' '+str(addrw)+' \n')
    outputNameFile_v.write('// DO NOT EDIT THIS FILE\n')
    outputNameFile_v.write('// Author  : 数字电路IC\n')
    outputNameFile_v.write('// Date    : '+time.strftime("%Y-%m-%d", time.localtime())+'\n')
    outputNameFile_v.write('// Description : \n')
    outputNameFile_v.write('//=======================================================\n')
    outputNameFile_v.write('\n')
    outputNameFile_v.write("`timescale 1ns/1ps\n")
    pass

def gen_v_port(outputNameFile_v,module,addrw,rtl_info_dict):
    wp_addr_list=[]
    outputNameFile_v.write('module '+module.lower()+'_regs (\n')
    outputNameFile_v.write('    input  wire \t\tI_sclk,\n')
    outputNameFile_v.write('    input  wire \t\tI_rstn,\n')
    for regname in rtl_info_dict['name'].keys():
        data_bits=('\t' if str(rtl_info_dict['data bits'][regname]).isdigit() else rtl_info_dict['data bits'][regname])
        if rtl_info_dict['type'][regname]=='rw':
            outputNameFile_v.write('    output reg  {}\t\t {},\n'.format(data_bits,rtl_info_dict['name'][regname]))
        elif rtl_info_dict['type'][regname]=='ro':
            outputNameFile_v.write('    input  wire {}\t\t {},\n'.format(data_bits,rtl_info_dict['name'][regname]))
        elif rtl_info_dict['type'][regname]=='wp':
            outputNameFile_v.write('    output reg  {}\t\t {},\n'.format(data_bits,rtl_info_dict['name'][regname]))
            wp_addr_list.append(rtl_info_dict['addr'][regname])
            wp_flag=1
    outputNameFile_v.write('    output reg  [31:0]\t\tO_wp_data,\n')
    outputNameFile_v.write('    // read/write\n')
    outputNameFile_v.write('    input  wire  \t\t\tI_wren,\n')
    outputNameFile_v.write('    input  wire  \t\t\tI_rden,\n')
    outputNameFile_v.write('    input  wire ['+str(addrw-1)+':0] \t\tI_addr,\n')
    outputNameFile_v.write('    input  wire [31:0] \t\tI_wdata,\n')
    outputNameFile_v.write('    output reg  [31:0] \t\tO_rdata\n')
    outputNameFile_v.write(');\n')
    outputNameFile_v.write('\n')
    return wp_flag,wp_addr_list

def gen_rtl(rtl_info_dict,outputNameFile_v,module,addrw):
    # 处理寄存器的name、addr、data bits
    proc_rtl_info(rtl_info_dict)

    # 生成文件头
    gen_v_header(outputNameFile_v,module,addrw)
    outputNameFile_v.write("`default_nettype none\n")
    outputNameFile_v.write('\n')
    # 生成ports
    wp_list=gen_v_port(outputNameFile_v,module,addrw,rtl_info_dict)
    for regname in rtl_info_dict['name'].keys():
        if str(rtl_info_dict['data bits'][regname]).isdigit() :
            bits_len = 1
        else :
            bits_len=int(rtl_info_dict['data bits'][regname].split(':',1)[0][1:])-int(rtl_info_dict['data bits'][regname].split(':',1)[1][:-1])+1
        # 生成rw代码
        if rtl_info_dict['type'][regname]=='rw':
            data_bits=(rtl_info_dict['data bits'][regname] if bits_len>1 else '['+str(rtl_info_dict['data bits'][regname])+']')
            outputNameFile_v.write('    always @(posedge I_sclk or negedge I_rst_n) begin\n')
            outputNameFile_v.write('        if (!I_rst_n)\n')
            outputNameFile_v.write('            {} <= {:d}\'d{:d};\n'.format(rtl_info_dict['name'][regname],bits_len,rtl_info_dict['reset value'][regname]))
            outputNameFile_v.write('        else if(I_wren && (I_addr==16\'h{:x}));\n'.format(int(rtl_info_dict['addr'][regname],16)))
            outputNameFile_v.write('            {} <= I_wdata{};\n'.format(rtl_info_dict['name'][regname],data_bits))
            outputNameFile_v.write('    end\n\n')
        # 生成wp代码
        elif rtl_info_dict['type'][regname]=='wp':
            outputNameFile_v.write('    always @(posedge I_sclk or negedge I_rst_n) begin\n')
            outputNameFile_v.write('        if (!I_rst_n)\n')
            outputNameFile_v.write('            {} <= 1\'d0;\n'.format(rtl_info_dict['name'][regname]))
            outputNameFile_v.write('        else if(I_wren && (I_addr==16\'h{:x}));\n'.format(int(rtl_info_dict['addr'][regname],16)))
            outputNameFile_v.write('            {} <= 1\'d1;\n'.format(rtl_info_dict['name'][regname]))
            outputNameFile_v.write('        else\n')
            outputNameFile_v.write('            {} <= 1\'d0;\n'.format(rtl_info_dict['name'][regname]))
            outputNameFile_v.write('    end\n\n')
    # 生成wp逻辑
    if wp_list[0] == 1:
        if  len(wp_list[1])>1:
            for wp_index,wp_addr in enumerate(wp_list[1]):
                if wp_index == 0:
                    wp_addr_flag = '(I_addr==16\'h{:x})'.format(int(wp_addr,16))
                else :
                    wp_addr_flag += ' || (I_addr==16\'h{:x})'.format(int(wp_addr,16))
        else :
            wp_addr_flag = '(I_addr==16\'h{:x})'.format(int(wp_addr,16))
        outputNameFile_v.write('    always @(posedge I_sclk or negedge I_rst_n) begin\n')
        outputNameFile_v.write('        if (I_wren && ({}))\n'.format(wp_addr_flag))
        outputNameFile_v.write('            O_wp_data <= I_wdata;\n')
        outputNameFile_v.write('    end\n\n')
    # 生成总线代码
    outputNameFile_v.write('    always @(posedge I_sclk) begin\n')
    outputNameFile_v.write('        if (I_rden) begin\n')
    outputNameFile_v.write('            O_rdata <= 1\'b0;\n')
    outputNameFile_v.write('            case (addr)\n')
    last_addr=None
    for regname in rtl_info_dict['name'].keys():
        if rtl_info_dict['type'][regname] != 'wp':
            data_bits=(rtl_info_dict['data bits'][regname] if not str(rtl_info_dict['data bits'][regname]).isdigit() else '['+str(rtl_info_dict['data bits'][regname])+']')
            if rtl_info_dict['addr'][regname] != last_addr :
                outputNameFile_v.write('            {} : begin\n'.format(rtl_info_dict['addr'][regname]))
                outputNameFile_v.write('                O_rdata{} <= {};\n'.format(data_bits,rtl_info_dict['name'][regname]))
                last_addr = rtl_info_dict['addr'][regname]
            else :
                outputNameFile_v.write('                O_rdata{} <= {};\n'.format(data_bits,rtl_info_dict['name'][regname]))
    outputNameFile_v.write('            endcase\n')
    outputNameFile_v.write('        end\n')
    outputNameFile_v.write('    end\n')
    outputNameFile_v.write('\n')
    outputNameFile_v.write('endmodule\n')
    outputNameFile_v.write('\n')
    outputNameFile_v.write("`default_nettype wire\n")
    pass

if __name__ == '__main__' :
    # usage
    # argnum = input_file + module_name + apb_addr_width + 1
    argnum = 4
    if len(sys.argv) != argnum : 
        print("USAGE : "+sys.argv[0]+" input_file module_name apb_addr_width")
        sys.exit()

    row_values=[]
    rtl_info_dict={}

    # 定义输入输出文件
    inputNameFile    = sys.argv[1]
    outputNameFile_v = open(sys.argv[2]+'_regs.v','w+')
    outputNameFile_h = open(sys.argv[2]+'_regs.h','w+')

    # 定义其他global变量
    # 定义首行
    startRowsList={'name','addr','data bits','reset value','type','comments'}
    module=sys.argv[2]
    addrw=int(sys.argv[3])
    
    ## 暂时未加，等待所有未知项
    sheetAName='reg'

    row_values=get_excel(inputNameFile,sheetAName)
    rtl_info_dict=get_rtl_info(row_values,startRowsList)
    gen_rtl(rtl_info_dict,outputNameFile_v,module,addrw)

    outputNameFile_v.close()
    outputNameFile_h.close()
    pass
